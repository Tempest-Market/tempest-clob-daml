module OrderStorage where

import DA.Optional
import qualified DA.Map as M


-- -------------------------
-- Data structures
-- -------------------------
data Order = Order
  with
    owner         : Party
    price         : Decimal
    depositAmount : Decimal
  deriving (Eq, Show)

data OrderStorage = OrderStorage
  with
    -- list[price][id] = nextId (0 if empty)
    list         : M.Map Decimal (M.Map Int Int)
    -- orders[id] = Order
    orders       : M.Map Int Order
    -- head[price] = id of head (0 if empty)
    head         : M.Map Decimal Int
    count        : Int         -- last issued id (0 means none yet)
    engine       : Party
    dormantOrder : Optional Order
  deriving (Eq, Show)


test: Int -> Int -> Int
test a b = a + b


-- -------------------------
-- Methods to change the state of the OrderStorage
-- -------------------------

insertId : OrderStorage -> Decimal -> Int -> Decimal -> OrderStorage
insertId os price id amount = 
    let headId = fromOptional 0 (M.lookup price os.head)  -- Get head ID, default to 0 (empty)
        orderList = fromOptional M.empty (M.lookup price os.list)
        orders = os.orders
    in
    -- insert order to the linked list
    -- if the list is empty (head ID is 0)
    if headId == 0 then
      let newHead = M.insert price id os.head
          newOrderList = M.insert id 0 orderList  -- Point to 0 (end of list)
          newList = M.insert price newOrderList os.list
      in os with head = newHead; list = newList; orders = orders
    else
      os
    



